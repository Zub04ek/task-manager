// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Task {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  tags        Tag[]
  priority    Priority @default(MEDIUM)
  status      Status   @default(TO_DO)
  isFutured   Boolean  @default(true)
  isCompleted Boolean  @default(false)
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  sequence    Int
  // dateRange   DateRange @relation(fields: [dateRangeId], references: [id])
  // dateRangeId String    @db.ObjectId
  // author      User      @relation(fields: [authorId], references: [id])
  // authorId    String    @db.ObjectId
  // comments    Comment[]
}

model Tag {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  value  String
  label  String
  color  String
  task   Task   @relation(fields: [taskId], references: [id], onDelete: Cascade)
  taskId String @db.ObjectId
}

// model User {
//   id    String @id @default(auto()) @map("_id") @db.ObjectId
//   email String @unique
//   name  String
//   tasks Task[]
// }

// model Comment {
//   id      String @id @default(auto()) @map("_id") @db.ObjectId
//   comment String 
//   task    Task   @relation(fields: [taskId], references: [id])
//   taskId  String @db.ObjectId
// }

// model DateRange {
//   id   String   @id @default(auto()) @map("_id") @db.ObjectId
//   from DateTime @default(now())
//   to   DateTime
//   Task Task[]
// }

enum Status {
  TO_DO
  IN_PROGRESS
  DONE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}
